class Solution {
public:
       void markparent(TreeNode* root,unordered_map<TreeNode*,TreeNode*>&parent_track ,TreeNode* target){
           queue<TreeNode*>q;         // bfs for storing each node parent
           q.push(root);
           while(!q.empty()){
               TreeNode* cur= q.front();
               q.pop();
               if(cur->left){
                   parent_track[cur->left]=cur;
                   q.push(cur->left);
               }
                if(cur->right){
                   parent_track[cur->right]=cur;
                    q.push(cur->right);
               }
           }
       }
    
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode*,TreeNode*>parent_track;
        markparent(root, parent_track, target);
        
        queue<TreeNode*>q;
        q.push(target);
        unordered_map<TreeNode*, bool>visited;
        visited[target]=true;
        int cur_k=0;
        while(!q.empty()){
            int size=q.size();
            if(cur_k==k)break;
            cur_k++;
            for(int i=0; i<size; i++){
                 TreeNode* cur=q.front();    q.pop();
                if(cur->left && !visited[cur->left]){
                    q.push(cur->left);
                    visited[cur->left]=true;
                }
                if(cur->right && !visited[cur->right]){
                    q.push(cur->right);
                    visited[cur->right]=true;
                }
                if(parent_track[cur] && !visited[parent_track[cur]]){
                    q.push(parent_track[cur]);
                        visited[parent_track[cur]]=true;
                }
            }
        }  
              vector<int>ans;
                while(!q.empty()){
                  TreeNode*    res=q.front();
                    q.pop();
                    ans.push_back(res->val);
                }
        return ans;
    }
};
