 static const int N=1e6;
int parent[N];
int Size[N];
void make(int v){parent[v]=v;Size[v]=1;}
int find(int v){if(v==parent[v]) return v;return parent[v]=find(parent[v]);}
void Union(int a, int b){a= find(a);b=find(b);if(a!=b){if(Size[a]>Size[b])swap(a, b);parent[b]=a;	Size[a]+=Size[b];}}

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        cout<<n<<" ";
        for(int i=0; i<n; i++){          // making of node
            make(i);
        }
         for(int i = 0; i<n; i++){
            for(int j = 0; j<n; j++){
                if(graph[i][j] == 1){
                    Union(i, j);
                }
            }
        }

        vector<int> infected(n, 0);
        for(auto it : initial){
            int x = find(it);
            infected[x]++;                                // all initials value should not belong to same grp 
                                                         
        } 

        int ans = -1;
        int maxsize = -1;
        for(auto it : initial){       
            int x = find(it);
            if(infected[x] == 1 && maxsize <= Size[x]){       // size of each groups  take that grp that initials belong to one
                if(maxsize == Size[x]) {
                    ans = min(ans, it);
                }
                else ans = it;
                maxsize = Size[x];
            }
        }

        if(ans == -1){
            int minval = n+1;
            for(auto it : initial){
               minval = min(it, minval);
            }
            return minval;
        }

        return ans;
    }
};